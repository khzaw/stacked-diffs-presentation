#+TITLE: How to Manage Stacked Diffs with Git
#+AUTHOR: Kaung Htet

* Stacked Diffs
+ Today I am going to talk about stacked diffs.
+ You might have also heard it as stacked diffs/stacked branches/stacked PRs workflows.
+ This talk is more focused on =How to manage staked diffs/branches?= rather than =Why?=
  + Most resources online don't really talk about =how= and point to =Phabricator=, =Graphite=., etc
+ Talk is also tailored more to our repositories.

* My Background
+ Started out with =svn= (very brief)
+ Mercurial =(hg)=,
+ Git =(git)=

* What are Stacked Diffs?
+ A workflow concept that invovles stacking ~a series of small, atomic and dependent changes~ on top of one another.
+ Allows code reviews to happen on each small change, making them more efficient and managable.
+ Every *"commit" (diff)* becomes a code review.
  + That's the Phabricator approach.
  + Trying to do that without tooling in our context is unintuitive and impractical.
  + The essense to have work on top of local =master= and the tool will create a new remote branch for each commit and a respective new code review ("PR" in our speak) for each commit against =master=.
  #+begin_src
master (local):    A---B---C---D---E---F
                           \
                       (origin/master)

- D, E, F becomes individual branches
- D is PR against C
- E is PR against C
- F is PR against C

In your only using Github UI,
- in E PR view, you see everything from D+E.
- in F PR view, you see everything from D+E+F.

Landing PRs.
The merge happens for (C)
Tooling sync back to your local branch and rebase against origin-master
master (local):    A---B---C---D---E---F
                                \
                             (origin/master)

  #+end_src

* Branches in =Git=
+ There is no such thing as "branches"
+ Branches are named references to commits.
  + Essentially 41-byte referecne pointing to a commit hash.
  + Exteremely cheap operation compared to other VCS.
*** Compared to other D-VCS?
+ Git branches are still very flexible since it treats them *purely as movable pointers to commits*.
+ e.g., *Mercurial* branches are permanent markers in commit history.

[[./img/pablo-refs.png]]

* Stacking branches prone to be extremely painful
+ In theory, stacked diffs seem like a pleasant workflow.
+ Stacked branches are dependent on each other.
+ Anytime there is an upstream change,
  + Every branch in the rest of the stack needs to be recursively rebased on top of one another to stay in sync again.
  + Child branches from D+2 onwards can be stuck in limbo with if D+1 is merged with =git merge --squash= to =trunk=.
+ Potential of cascading merge conflicts.
+ Can get real messy
  + If you are not crystal clear on what's happening. (With/without tooling).
+ This talk will suggest workflows/tooling.
  + Without being clear on what's happening underneath, you are prone to a lot of nested mess.

* True =merge= vs =squash merge= vs =rebase merge=
+ A true =merge= brings in no changes but connects the two or more histories with a parent pointer to each.
  + *Preserves* the complete branch history and shows the relationship between branches.
+ =Squash merge= *combines* all feature commits into a single commit on the base branch, loses branch relationships.
+ =Rebase merge= replays commits for linear history, no merge commit, new hashes.
#+begin_src :exports code
Starting state:
main        A---B---C
                \
feature         D---E---F


Regular Merge:   A---B---C---------M
                     \           /
                      D---E---F

Squash Merge:    A---B---C---S
                     \
                      D---E---F

Rebase Merge:    A---B---C---D'---E'---F'
#+end_src

* Problem with =squash merge=
+ =squash= merges are not true merges.
+ It's simply one independent commit added to the target branch containing all the changes /copied/ from the resulting diff of the source + target branches.
+ Without any reference to the source branch, literally except for comments in the commit message.
+ Really against squash merges to trunk.
+ Personally a little iffy about this choice, but it makes sense for us given how we use PRs and branches.
  + At the end of the day the goal of =master= to have atomic changset in each commit that lands on it.
* Rebase
+ =Rebasing= is a core part of maintaing stacked branches.
+ *3 Principles* to follow generally.
  + Keep branches small
  + =Rebase= on top of _trunk_ to keep it up to date.
  + You want each branch to always be on top of each other =in a linear manner=.
*** Start a =feature= branch from =master=
#+begin_src mermaid :file img/rebase-feature-branch-from-master.png :exports results
%%{init: {
    'gitGraph': {
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
---
tilte: Feature branch from master
---
gitGraph
commit id: "A"
commit id: "B"
commit id: "C"
branch faeture
commit id: "D"
commit id: "E"
#+end_src

#+RESULTS:
[[file:img/rebase-feature-branch-from-master.png]]
*** =master= has updates
#+begin_src mermaid :file img/rebase-feature-branch-master-has-updates.png :exports results
%%{init: {
'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
},
'titleTopMargin': 25
}}%%
---
tilte: Feature branch from master
---
gitGraph LR:
commit id: "A"
commit id: "B"
commit id: "C"
branch feature
commit id: "D"
commit id: "E"
checkout master
commit id: "F"
commit id: "G"
#+end_src

#+RESULTS:
[[file:img/rebase-feature-branch-master-has-updates.png]]

*** =rebase= feature onto =master=
#+begin_src zsh :exports code
git fetch origin master:master # pull down changes
git rebase master
#+end_src

#+begin_src mermaid :file img/rebase-feature-onto-master.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
---
tilte: Feature branch from master
---
gitGraph LR:
commit id: "A"
commit id: "B"
commit id: "C"
commit id: "F"
commit id: "G"
branch feature
commit id: "D"
commit id: "E" type: HIGHLIGHT
#+end_src

#+RESULTS:
[[file:img/rebase-feature-onto-master.png]]

* Making stacked branches
*** Create stacked branches
#+begin_src mermaid :file img/create-stacked-branches.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
---
title: Making stacked branches
---
gitGraph LR:
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1
    commit id: "D"
    commit id: "X"
    commit id: "Y"
    branch feature2
    commit id: "E"
    branch feature3
    commit id: "F"
#+end_src

#+RESULTS:
[[file:img/create-stacked-branches.png]]

*** Keep your changset small
+ Say you keep working on =feature1=
#+begin_src zsh :exports code
git checkout feature1
# ... more work here
git commit -am 'Debug'
# ... more work here
git commit -am 'Fix typo'
git revert HEAD^
#+end_src

#+begin_src mermaid :file img/feature-1-has-updates.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master',
        'parallelCommits': true
    },
    'titleTopMargin': 25
}}%%
gitGraph
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1
    checkout feature1
    commit id: "D"
    commit id: "X"
    commit id: "Y"
    branch feature2
    checkout feature2
    commit id: "E"
    branch feature3
    checkout feature3
    commit id: "F"
    checkout feature1
    commit id: "Debug" type: HIGHLIGHT
    commit id: "Fix typo" type: HIGHLIGHT
    commit id: "Revert Debug" type: REVERSE
#+end_src

#+RESULTS:
[[file:img/feature-1-has-updates.png]]

+ =rebase= feature1
#+begin_src zsh :exports code
git rebase -i # DEMO?
  #+end_src
#+begin_src mermaid :file img/rebase-feature-1.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
---
title: Making stacked branches
---
gitGraph
    branch orphaned order: 2
    checkout master
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1 order: 1
    checkout feature1
    commit id: "D"
    commit id: "X"
    commit id: "Y'" tag: "new Y"
    checkout orphaned
    commit id: "Y" type: REVERSE tag: "old Y"
    branch feature2 order: 3
    checkout feature2
    commit id: "E"
    branch feature3 order: 4
    checkout feature3
    commit id: "F"
#+end_src

#+RESULTS:
[[file:img/rebase-feature-1.png]]

+ In fact keep it as lean and atomic as possible
  + Not necessarily mean literally one commit

#+begin_src mermaid :file img/rebase-feature-1-clean.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
---
title: Making stacked branches
---
gitGraph
    branch orphaned order: 2
    checkout master
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1 order: 1
    checkout feature1
    commit id: "DXY"
    checkout orphaned
    commit id: "Y" type: REVERSE tag: "old Y"
    branch feature2 order: 3
    checkout feature2
    commit id: "E"
    branch feature3 order: 4
    checkout feature3
    commit id: "F"
#+end_src

#+RESULTS:
[[file:img/rebase-feature-1-clean.png]]

* =Rebase= child branches one by one
#+begin_src zsh :exports code
git checkout feature2
git rebase feature1
#+end_src
#+begin_src mermaid :file img/rebase-feature2-onto-feature1.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
---
title: Making stacked branches
---
gitGraph
    branch orphaned order: 3
    checkout master
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1 order: 1
    checkout feature1
    commit id: "DXY"
    branch feature2 order: 2
    checkout feature2
    commit id: "E'" tag: "new E"
    checkout orphaned
    commit id: "E" type: REVERSE tag: "old E"
    branch feature3 order: 4
    checkout feature3
    commit id: "F"
#+end_src

#+RESULTS:
[[file:img/rebase-feature2-onto-feature1.png]]

#+begin_src zsh :exports code
git checkout feature3
git rebase feature2
#+end_src
#+begin_src mermaid :file img/rebase-child-branches-final-state.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
---
title: Making stacked branches
---
gitGraph
    checkout master
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1 order: 1
    checkout feature1
    commit id: "DXY"
    branch feature2 order: 2
    checkout feature2
    commit id: "E'"
    branch feature3 order: 3
    checkout feature3
    commit id: "F'"

#+end_src

#+RESULTS:
[[file:img/rebase-child-branches-final-state.png]]

* Can we do it in one go?
+ Yes, enter =git rebase --onto= for surgically more precise rebasing.

#+begin_src zsh :exports code
git rebase --onto <newparent> <old parent> HEAD
git rebase --onto <newparent> <old parent> <until>
#+end_src

*** Rewind the state after =rebasing= feature1
#+begin_src mermaid :file img/rebase-feature-1-clean-with-head.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
---
title: Making stacked branches
---
gitGraph
    branch orphaned order: 2
    checkout master
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1 order: 1
    checkout feature1
    commit id: "DXY" tag: "HEAD"
    checkout orphaned
    commit id: "Y" type: REVERSE tag: "old Y"
    branch feature2 order: 3
    checkout feature2
    commit id: "E"
    branch feature3 order: 4
    checkout feature3
    commit id: "F"
    commit id: "G"
    commit id: "H"
    branch feature4 order: 5
    checkout feature4
    commit id: "I"
    commit id: "J"
#+end_src

#+RESULTS:
[[file:img/rebase-feature-1-clean-with-head.png]]

*** Go to the innermost child branch at the end of the stack.
#+begin_src zsh :exports code
git checkout feature4
git rebase --onto feature1 feature2^ feature4 --update-refs
#+end_src
#+begin_src mermaid :file img/stacked-branches-final-state.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
---
title: Making stacked branches
---
gitGraph
    checkout master
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1 order: 1
    checkout feature1
    commit id: "DXY"
    branch feature2 order: 2
    checkout feature2
    commit id: "E"
    branch feature3 order: 3
    checkout feature3
    commit id: "F"
    commit id: "G"
    commit id: "H"
    branch feature4 order: 4
    checkout feature4
    commit id: "I"
    commit id: "J" tag: "HEAD"
#+end_src

#+RESULTS:
[[file:img/stacked-branches-final-state.png]]

* Merging =feature1= to =master=.
*** feature1 has been reviewed and finally merged to =master=.
#+begin_src zsh :exports code
git checkout master
git merge --squash feature1
# At github remote, it auto delete the remote branch (origin/feature1) -- Our settings
#+end_src

#+begin_src mermaid :file img/feature-1-post-squash-merge-to-master.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
gitGraph
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1 order: 1
    checkout feature1
    commit id: "D"
    commit id: "X"
    commit id: "Y'"
    branch feature2 order: 2
    checkout feature2
    commit id: "E'"
    branch feature3 order: 3
    checkout feature3
    commit id: "F'"
    commit id: "G"
    commit id: "H"
    commit id: "I"
    checkout master
    commit id: "SQUASHED(D+X+Y')"

#+end_src

#+RESULTS:
[[file:img/feature-1-post-squash-merge-to-master.png]]
*** Now what?
+ Your local feature1 branch still exits.
+ After pulling, Git does not even know that it was merged to master
+ When you delete, you have to use =-D= instead of =-d=.
+ Anyway, let's continue the rebase.
#+begin_src zsh :exports code
git branch -D feature1
git checkout feature3
git rebase --onto origin/master feature2^ feature3 --update-refs

# still need to update the remote refs
git push --force-with-lease origin feature3:feature3
git push --force-with-lease origin feature2:feature2
#+end_src

#+begin_src mermaid :file stack-branches-final-state-update-refs.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
gitGraph
    commit id: "A"
    commit id: "B"
    commit id: "C"
    commit id: "SQUASHED(D+X+Y')"
    branch feature2 order: 2
    checkout feature2
    commit id: "E'"
    branch feature3 order: 3
    checkout feature3
    commit id: "F'"
    commit id: "G"
    commit id: "H"
    commit id: "I"
#+end_src

#+RESULTS:
[[file:stack-branches-final-state-update-refs.png]]

* What exactly is =--update-refs= ?

*** Go back to post squash merge state
#+begin_src mermaid :file post-squash-merge-feature-1.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
gitGraph
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1 order: 1
    checkout feature1
    commit id: "D"
    commit id: "X"
    commit id: "Y'"
    branch feature2 order: 2
    checkout feature2
    commit id: "E'"
    branch feature3 order: 3
    checkout feature3
    commit id: "F'"
    commit id: "G"
    commit id: "H"
    commit id: "I"
    checkout master
    commit id: "SQUASHED(D+X+Y')"

#+end_src

#+RESULTS:
[[file:post-squash-merge-feature-1.png]]

*** Without =--update-refs=
+ What you wanted still happens, old branch references still remain
#+begin_src zsh :exports code
git checkout feature3
git rebase --onto origin/master feature2^ feature3 --udpate-refs
git reset --hard origin/feature3

#+end_src

#+begin_src mermaid :file rebase-child-branches-without-stacked-refs.png :exports results
%%{init: {
    'gitGraph': {
        'showBranches': true,
        'showCommitLabel': true,
        'mainBranchName': 'master'
    },
    'titleTopMargin': 25
}}%%
gitGraph
    checkout master
    commit id: "A"
    commit id: "B"
    commit id: "C"
    branch feature1_local order: 1
    checkout feature1_local
    commit id: "D"
    commit id: "X"
    commit id: "Y"
    branch feature2 order: 2
    checkout feature2
    commit id: "E"
    branch feature3 order: 3
    checkout feature3
    commit id: "F"
    commit id: "G"
    commit id: "H"
    commit id: "I"
    checkout master
    commit id: "SQUASH(D+X+Y)"
    branch newstack_notabranch order: 4
    checkout newstack_notabranch
    commit id: "E'"
    branch newstack_notabranch2 order: 5
    checkout newstack_notabranch2
    commit id: "F'"
    commit id: "G'"
    commit id: "H'"
    commit id: "I'"
#+end_src

#+RESULTS:
[[file:rebase-child-branches-without-stacked-refs.png]]

* To sum up

+ Keep changset small in a branch. Always clean it up. (=git rebase -i=)
+ If a branch is merged, use =git rebase --onto= with =--update-refs= from the innermost branch

#+begin_src zsh :exports code

# after every merge, go to innermost branch
git rebase --onto <newparent> <oldparent> <until> --update-refs


# update the remote refs
for all branches from branch+1 to innermost branch
  git push -f origin <ref>
endfor
#+end_src

*** Can I automate this part.
+ Yes, check out [[https://www.git-town.com/][Git Town]].
#+begin_src zsh
git town hack <my-feature>
# work on stuffs and create commits
git town append <branch2>
git town append <branch3>
git town append <branch4>
git town append <branch5>

# Ship branch2 for example
git town ship branch2

# And then from your youngest branch
git town sync
#+end_src
